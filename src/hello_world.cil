.TYPES

type Object {
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
}

type IO {
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
    method IO_out_string: func_IO_out_string;
    method IO_out_int: func_IO_out_int;
    method IO_in_string: func_IO_in_string;
    method IO_in_int: func_IO_in_int;
}

type String {
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
    method String_length: func_String_length;
    method String_concat: func_String_concat;
    method String_substr: func_String_substr;
}

type Int {
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
}

type Bool {
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
}

type A {
    attribute bar;
    attribute quz;
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
    method A_foo: func_A_foo;
    method A_g: func_A_g;
}

type Main {
    attribute msg;
    attribute foo;
    method Object_abort: func_Object_abort;
    method Object_type_name: func_Object_type_name;
    method Object_copy: func_Object_copy;
    method IO_out_string: func_IO_out_string;
    method IO_out_int: func_IO_out_int;
    method IO_in_string: func_IO_in_string;
    method IO_in_int: func_IO_in_int;
    method Main_main: func_Main_main;
}

.DATA

object_type_name = "Object";
s1 = "Hello World\n";

.CODE

function entry {
    LOCAL expr_value_0;
    LOCAL msg_0;
    LOCAL foo_0;
    LOCAL result;
    LOCAL instance;
    instance = ALLOCATE Main;
    expr_value_0 = LOAD s1;
    SETATTR instance msg_0 expr_value_0;
    ARG instance;
    result = VCALL Main Main_main;
    RETURN 0
}

function func_A_foo {
    PARAM self;
    LOCAL expr_value_1;
    expr_value_1 = 0;
}

function func_A_g {
    PARAM self;
    PARAM x_0;
}

function func_Main_main {
    PARAM self;
    LOCAL bar_0;
    LOCAL expr_value_0;
    LOCAL expr_value_1;
    LOCAL expr_value_2;
    LOCAL expr_value_3;
    LOCAL quz_0;
    expr_value_1 = ALLOCATE A;
    expr_value_0 = 10;
    SETATTR expr_value_1 quz_0 expr_value_0;
    ARG expr_value_1;
    expr_value_2 = VCALL A A_foo;
    SETATTR self foo_0 expr_value_2;
    ARG self;
    ARG msg_0;
    expr_value_3 = VCALL Main IO_out_string;
}